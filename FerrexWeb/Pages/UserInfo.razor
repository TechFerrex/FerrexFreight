@page "/userinfo"
@using Microsoft.EntityFrameworkCore
@using FerrexWeb.Services
@using FerrexWeb.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.IdentityModel.Tokens
@using System.Text
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IEmailSender EmailSender
@inject IConfiguration _configuration
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.ComponentModel.DataAnnotations

<div class="main">
    @if (showErrorModal)
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h3 style="color:red">¡Error!</h3>
                <p>@errorModalMessage</p>
                    <div style="display:flex; justify-content:center; gap:10px;">
                        <button class="user-button" @onclick="CloseErrorModal">
                        Cerrar
                    </button>
                    @if (showForgotPasswordOption)
                    {
                       <button class="user-button" 
                            style="background-color:orange; margin-left:10px;"
                            @onclick="OpenForgotPasswordModal">
                           ¿Olvidaste tu contraseña?
                      </button>
                    }
                </div>
            </div>
        </div>
    }
    @if (showForgotPasswordModal)
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h3>Recuperar contraseña</h3>
                <EditForm Model="forgotModel" OnValidSubmit="HandleForgotPassword">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Solo lectura y precargado desde loginModel.Email -->
                    <InputText class="user-input"
                               @bind-Value="forgotModel.Email"
                               readonly />

                    @if (!string.IsNullOrEmpty(forgotErrorMsg))
                    {
                        <p style="color:red">@forgotErrorMsg</p>
                    }
                    @if (!string.IsNullOrEmpty(forgotSuccessMsg))
                    {
                        <p style="color:green">@forgotSuccessMsg</p>
                    }

                    <div style="display:flex; justify-content:center; gap:10px;">
                        <button class="user-button"
                                type="submit"
                                disabled="@isForgotSubmitting">
                            @(isForgotSubmitting ? "Enviando..." : "Enviar enlace")
                        </button>
                        <button class="user-button"
                                style="background-color:#aaa; margin-left:10px;"
                                type="button"
                                @onclick="() => showForgotPasswordModal = false">
                            Cerrar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }



    @if (showVerifyModal)
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h3>¡Verifica tu correo!</h3>
                <p>@verifyModalMessage</p>
                <div style="text-align:right">
                    <button class="user-button" @onclick="CloseVerifyModal">Cerrar</button>
                </div>
            </div>
        </div>
    }


    @if (showPolicyDialog)
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h3>Política de Privacidad</h3>
                <p>
                    Aquí va el texto completo de tu política o un resumen. <br />
                    El usuario debe leer y aceptar.
                </p>
                <div style="text-align: right;">
                    <button class="user-button" @onclick="AcceptPolicy"
                    style="display:inline-block; width:auto; margin-right:10px;">
                        Aceptar
                    </button>
                    <button class="user-button" @onclick="DeclinePolicy"
                    style="display:inline-block; width:auto; background-color:red;">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    }

    <input type="checkbox" id="chk" aria-hidden="true" class="user-input">
    <div class="signup">
        <form @onsubmit:preventDefault="true">
            <label for="chk" aria-hidden="true">Registrarse</label>
            <input type="text" class="user-input" name="name" placeholder="Tu Nombre" @bind="registerModel.Name" required>
            <input type="email" class="user-input" name="email" placeholder="Correo" @bind="registerModel.Email" required>
            <input type="text" class="user-input" name="phoneNumber" placeholder="Número de Teléfono" @bind="registerModel.PhoneNumber" required>
            <input type="password" class="user-input" name="password" placeholder="Contraseña" @bind="registerModel.Password" required
            minlength="8"
            pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\w])[A-Za-z\d\S]{8,}$"
            title="La contraseña debe tener al menos 8 caracteres, incluyendo una mayúscula, un número y un carácter especial." />
            <button class="user-button"
                    type="button"
                    @onclick="OnRegisterClick"
                    disabled="@isRegistering">
                @(isRegistering ? "Registrando..." : "Registrarse")
            </button>
            @if (!string.IsNullOrEmpty(registerMessage))
            {
                <div class="alert alert-info">@registerMessage</div>
            }
        </form>
    </div>

    <div class="login">
        <form @onsubmit:preventDefault="true">
            <label style="padding-top: 50px" for="chk" aria-hidden="true">Inicio de Sesión</label>
            <input type="email" class="user-input" name="email" placeholder="Correo" @bind="loginModel.Email" required />
            <input type="password" class="user-input" name="password" placeholder="Contraseña" @bind="loginModel.Password" required />
            <button class="user-button"
            type="button"
            @onclick="HandleLogin"
            disabled="@isLoggingIn">
                @(isLoggingIn ? "Iniciando..." : "Iniciar sesión")
            </button>
        </form>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private RegisterModel registerModel = new RegisterModel();
    private bool loginFailed;
    private bool registerFailed;
    private bool showForgotPasswordOption = false;
    private bool showForgotPasswordModal = false;
    private string loginMessage;

    private bool isLoggingIn = false;
    private bool isRegistering = false;
    private bool showPolicyDialog = false;
    private bool showErrorModal = false;
    private bool showVerifyModal = false;
    private string verifyModalMessage;
    private string errorModalMessage = string.Empty;
  

    private string registerMessage;

    private static Dictionary<string, int> loginAttempts = new Dictionary<string, int>();
    private static Dictionary<string, DateTime> lockouts = new Dictionary<string, DateTime>();

    private ForgotPasswordModel forgotModel = new();

    // Mensajes dentro del modal
    private string forgotErrorMsg;
    private string forgotSuccessMsg;
    private class ForgotPasswordModel
    {
        [Required, EmailAddress]
        public string Email { get; set; }
    }
    // Abre el modal de recuperar
    private void OpenForgotPasswordModal()
    {
        showForgotPasswordModal = true;
        showErrorModal = false;    // cierra el error de login
        forgotErrorMsg = null;
        forgotSuccessMsg = null;
        forgotModel.Email = loginModel.Email;
    }
    private bool isForgotSubmitting = false;

    private async Task HandleForgotPassword()
    {
        if (isForgotSubmitting) return;
        isForgotSubmitting = true;
        forgotErrorMsg = null;
        forgotSuccessMsg = null;

        try
        {
            // 1) Que no haya modificado el email
            if (!string.Equals(forgotModel.Email, loginModel.Email,
                    StringComparison.OrdinalIgnoreCase))
            {
                forgotErrorMsg = "El correo debe coincidir con el que ingresaste al iniciar sesión.";
                return;
            }

            // 2) Recuperar usuario UNA sola vez
            var user = await DbContext.Users
                .FirstOrDefaultAsync(u => u.Email == forgotModel.Email);
            if (user == null)
            {
                forgotErrorMsg = "No existe un usuario con ese correo.";
                return;
            }

            // 3) Generar token y guardarlo
            var token = Guid.NewGuid().ToString("N");
            var pr = new PasswordReset
                {
                    UserId = user.Id,
                    Token = token,
                    ExpiresAt = DateTime.UtcNow.AddHours(2),
                    CreatedAt = DateTime.UtcNow
                };
            DbContext.PasswordResets.Add(pr);
            await DbContext.SaveChangesAsync();

            // 4) Enviar enlace
            var link = $"{NavigationManager.BaseUri.TrimEnd('/')}/resetpassword?token={token}";
            var html = $@"
            <p>¡Hola {user.Name}!</p>
            <p>Haz clic <a href=""{link}"">aquí</a> para restablecer tu contraseña.</p>
            <p>Expira: {pr.ExpiresAt:yyyy-MM-dd HH:mm} UTC.</p>";
            await EmailSender.SendEmailAsync(user.Email,
                "Recupera tu contraseña en Ferrexpress",
                html);

            forgotSuccessMsg = "Listo, revisa tu correo para restablecer tu contraseña.";
        }
        catch
        {
            forgotErrorMsg = "Error al enviar el enlace. Inténtalo de nuevo más tarde.";
        }
        finally
        {
            isForgotSubmitting = false;
        }
    }


    private async Task HandleLogin()
    {
        if (isLoggingIn) return;
        isLoggingIn = true;
        showErrorModal = false;


        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == loginModel.Email);
        if (user == null || !BCrypt.Net.BCrypt.Verify(loginModel.Password, user.Password))
        {
            showForgotPasswordOption = true;
            ShowError("Correo o contraseña incorrectos.");
            isLoggingIn = false;
            return;
        }

        if (!user.EmailConfirmed)
        {
            ShowError("Verifica tu correo antes de iniciar sesión.");
            isLoggingIn = false;
            return;
        }


        // Generar JWT y navegar
        var claims = new List<Claim> {
            new Claim(ClaimTypes.Name, user.Name),
            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
            new Claim(ClaimTypes.Email, user.Email),
            new Claim(ClaimTypes.Role, user.Role)
        };
        var token = GenerateJwt(claims);
        if (AuthenticationStateProvider is CustomAuthenticationStateProvider cap)
            await cap.SignIn(token);

        NavigationManager.NavigateTo("/");
    }

    private string GenerateJwt(List<Claim> claims)
    {
        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JwtSettings:SecretKey"]));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
        var jwt = new JwtSecurityToken(
            issuer: _configuration["JwtSettings:Issuer"],
            audience: _configuration["JwtSettings:Audience"],
            claims: claims,
            expires: DateTime.UtcNow.AddHours(8),
            signingCredentials: creds);
        return new JwtSecurityTokenHandler().WriteToken(jwt);
    }

    private void OnRegisterClick()
    {
        if (isRegistering) return;
        showPolicyDialog = true;
    }

    private async Task AcceptPolicy()
    {
        registerModel.PolicyAccepted = true;

        showPolicyDialog = false;

        await HandleRegister();
    }

    private void DeclinePolicy()
    {
        registerModel.PolicyAccepted = false;
        showPolicyDialog = false;
    }

    private async Task HandleRegister()
    {
        if (isRegistering) return;
        isRegistering = true;
        registerMessage = null;

        // 1) Validar campos...
        if (string.IsNullOrWhiteSpace(registerModel.Name)
            || string.IsNullOrWhiteSpace(registerModel.Email)
            || string.IsNullOrWhiteSpace(registerModel.Password))
        {
            registerMessage = "Todos los campos son obligatorios.";
            isRegistering = false;
            return;
        }

        // 2) Comprobar duplicado
        if (await DbContext.Users.AnyAsync(u => u.Email == registerModel.Email))
        {
            registerMessage = "Este correo ya está registrado.";
            isRegistering = false;
            return;
        }

        // 3) Crear usuario "pendiente"
        var user = new User
            {
                Name = registerModel.Name,
                Email = registerModel.Email,
                PhoneNumber = registerModel.PhoneNumber,
                Password = BCrypt.Net.BCrypt.HashPassword(registerModel.Password),
                CreateTime = DateTime.UtcNow,
                Role = "User",
                PolicyUser = registerModel.PolicyAccepted,
                EmailConfirmed = false
            };
        DbContext.Users.Add(user);
        await DbContext.SaveChangesAsync();

        // 4) Generar token y guardarlo en tabla EmailVerifications
        var token = Guid.NewGuid().ToString("N");
        var ev = new EmailVerification
            {
                UserId = user.Id,
                Token = token,
                ExpiresAt = DateTime.UtcNow.AddMinutes(30),
                CreatedAt = DateTime.UtcNow
            };
        DbContext.EmailVerifications.Add(ev);
        await DbContext.SaveChangesAsync();

        // 5) Enviar correo con Brevo
        var link = $"{NavigationManager.BaseUri.TrimEnd('/')}/verify?token={token}";
        var html = $@"
            <p>¡Hola {user.Name}!</p>
            <p>Haz clic <a href=""{link}"">aquí</a> para verificar tu correo.</p>
            <p>Expira: {ev.ExpiresAt:yyyy-MM-dd HH:mm} UTC</p>";
        await EmailSender.SendEmailAsync(user.Email, "Verifica tu correo", html);

        verifyModalMessage = "Listo: revisa tu bandeja para confirmar tu cuenta.";
        showVerifyModal = true;
        isRegistering = false;
    }

    private void CloseVerifyModal()
    {
        showVerifyModal = false;
    }
    private string SerializeClaims(List<Claim> claims)
    {
        var secretKey = _configuration["JwtSettings:SecretKey"];
        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var token = new JwtSecurityToken(
            issuer: _configuration["JwtSettings:Issuer"],
            audience: _configuration["JwtSettings:Audience"],
            claims: claims,
            expires: DateTime.Now.AddHours(8),
            signingCredentials: creds);

        return new JwtSecurityTokenHandler().WriteToken(token);
    }
    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class RegisterModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string Password { get; set; }
        public bool PolicyAccepted { get; set; }

    }
 

    // Método para abrir el modal
    private void ShowError(string message)
    {
        errorModalMessage = message;
        showErrorModal = true;
    }

    // Método para cerrarlo
    private void CloseErrorModal()
    {
        showErrorModal = false;
        // Opcionalmente: limpiar flags de fallo
        loginFailed = false;
        registerFailed = false;
    }

}

<style>
    body {
        background: url("/images/sitioweb-horizontal.png") no-repeat center/cover;
        margin: 0;
    }


    .main {
        padding: 0;
        width: 650px;
        height: 600px;
        margin: 0 auto;
        border-radius: 15px;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        font-family: 'Jost', sans-serif;
        background: linear-gradient(to bottom, #e6b23b, #F5C144, #e6b23b);
    }

    #chk {
        display: none;
    }

    .signup, .login {
        position: relative;
        width: 100%;
        height: 90%;
    }

    label {
        color: #fff;
        font-size: 2.3em;
        justify-content: center;
        display: flex;
        margin: 60px;
        font-weight: bold;
        cursor: pointer;
        transition: .5s ease-in-out;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5); /* semitransparente */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* para que quede por encima de todo */
    }

    .modal-box {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 500px;
        max-width: 90%; /* Para que en pantallas pequeñas se ajuste */
    }


    .user-input {
        width: 300px;
        height: 50px;
        background: #ffffff;
        justify-content: center;
        display: flex;
        margin: 10px auto;
        padding: 10px;
        border: none;
        outline: none;
        border-radius: 5px;
    }

    .user-button {
        width: 60%;
        height: 40px;
        margin: 10px auto;
        justify-content: center;
        display: block;
        color: #fff;
        background: #000000;
        font-size: 1em;
        font-weight: bold;
        margin-top: 20px;
        outline: none;
        border: none;
        border-radius: 5px;
        transition: .2s ease-in;
        cursor: pointer;
    }

        .user-button:hover {
            background: #ffffff;
            color: #000000;
        }

    .login {
        height: 560px;
        background: #ffffff;
        border-radius: 60% / 10%;
        transform: translateY(-180px);
        transition: .8s ease-in-out;
    }

        .login label {
            color: #e6b23b;
            transform: scale(.6);
        }

    #chk:checked ~ .login {
        transform: translateY(-500px);
    }

        #chk:checked ~ .login label {
            transform: scale(1);
        }

    #chk:checked ~ .signup label {
        transform: scale(.6);
    }

    @@media (max-width: 600px) {
        .main {
            width: 95%;
            height: 550px;
            margin: 10px;
        }

        .signup, .login {
            height: 600px;
            padding: 20px;
        }

        label {
            font-size: 1.8em;
            margin: 30px;
        }

        .user-input, button {
            width: 95%;
            font-size: 0.9em;
            height: 45px;
        }

        .user-button {
            height: 45px;
            font-size: 1em;
        }

        .login {
            transform: translateY(-180px);
            transition: .8s ease-in-out;
            border-radius: 10px;
        }

        #chk:checked ~ .login {
            transform: translateY(-500px);
        }
    }

</style>