@page "/freight"
@using Microsoft.JSInterop
@using System.Security.Claims
@using FerrexWeb.Models
@using FerrexWeb.Services
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FreightQuotationService FreightQuotationService

<div class="container my-5">
    <div class="card shadow">
        <div class="card-header header-card" style="background-color: #F5C144;">
            <h3 class="card-title mb-0">PLANIFICA TU RUTA DE FLETES</h3>
        </div>
        <div class="card-body">
            <div id="alertMessage" class="alert alert-warning" style="display: none; margin-bottom: 15px;" role="alert"></div>
            <div class="row">
                <div class="col-md-4">
                    <button class="btn btn-secondary w-100 mb-2" @onclick="ActivateMapSelection">Seleccionar en el Mapa</button>
                    <div class="d-flex align-items-center justify-content-center my-2">
                        <hr style="flex-grow: 1; border-top: 1px dashed #6c757d; margin: 0;">
                        <span style="margin: 0 10px; color: #6c757d;">o</span>
                        <hr style="flex-grow: 1; border-top: 1px dashed #6c757d; margin: 0;">
                    </div>
                    <div class="mb-3">
                        <label for="origin-input" class="form-label">Escribe el Origen</label>
                        <input id="origin-input" type="text" class="form-control" placeholder="Ingresa origen o usa selección en mapa" />
                    </div>
                    <div class="mb-3">
                        <label for="destination-input" class="form-label">Escribe el Destino</label>
                        <input id="destination-input" type="text" class="form-control" placeholder="Ingresa destino o usa selección en mapa" />
                    </div>
                    @* <div class="mb-3">
                        <label for="truck-type" class="form-label">Tipo de Camión</label>
                        <select id="truck-type" class="form-select" @onchange="UpdateTruckCosts">
                            <option value="pickup">Tipo Pickup</option>
                            <option value="panel">Tipo Panelita</option>
                            <option value="small">Camión Pequeño (6 ton)</option>
                            <option value="medium">Camión Mediano (12 ton)</option>
                            <option value="big">Cabezal</option>
                        </select>
                    </div> *@
                    <div class="mb-3">
                        <label class="form-label">Tipo de Camión</label>
                        <div class="truck-selection d-flex flex-wrap gap-3">
                            <div class="truck-card @(selectedTruckType == "pickup" ? "active" : "")"
                                 data-truck-type="pickup"
                                 @onclick='() => SelectTruckType("pickup")'>
                                <i class="fas fa-truck-pickup"></i>
                                <div class="truck-name">Tipo Pickup</div>
                            </div>
                            <div class="truck-card @(selectedTruckType == "small" ? "active" : "")"
                                 data-truck-type="small"
                                 @onclick='() => SelectTruckType("small")'>
                                <i class="fas fa-truck"></i>
                                <div class="truck-name">Camión Pequeño (6 ton)</div>
                            </div>
                            @* <div class="truck-card @(selectedTruckType == "medium" ? "active" : "")"
                                 data-truck-type="medium"
                                 @onclick='() => SelectTruckType("medium")'>
                                <i class="fas fa-truck-moving"></i>
                                <div class="truck-name">Camión Mediano (12 ton)</div>
                            </div> *@
                        </div>
                        <input id="truck-type" type="hidden" value="@selectedTruckType" />
                    </div>
                    <div class="mb-3">
                        <label for="freight-date" class="form-label">Fecha de Programación</label>
                        <input id="freight-date" type="date" class="form-control" min="@MinDate" />
                    </div>
                    <div class="mb-3">
                        <button class="btn btn-success w-100 mb-2" @onclick="CalculateRoute">Calcular Ruta</button>
                        <button class="btn btn-danger w-100" @onclick="ClearData">Limpiar datos</button>
                    </div>
                </div>
                <div class="col-md-8">
                    <div id="map-container" style="position: relative;">
                        <div id="map" style="height: 500px; width: 100%;"></div>
                        <div id="selectionTip" style="position: absolute; top: 10px; left: 50%; transform: translateX(-50%); background: rgba(0, 123, 255, 0.9); color: #fff; padding: 8px 12px; border-radius: 4px; display: none; z-index: 1001;">
                            Selecciona el origen en el mapa
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="customModal" class="modal">
    <div class="modal-content">
        <div id="modalError" class="alert alert-danger" style="display: none; margin-bottom: 15px;"></div>
        <div id="modalBody"></div>
    </div>
</div>

@code {
    private bool _firstRender = true;
    private string MinDate { get; set; } = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");
    private DotNetObjectReference<Freight> dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            try
            {
                await JS.InvokeVoidAsync("loadGoogleMapsScript", dotNetRef);
            }
            catch (JSException jsEx)
            {
                await JS.InvokeVoidAsync("showMapErrorModal", true, "Error al cargar el mapa. Por favor recarga la página.");
                Console.Error.WriteLine(jsEx.Message);
            }
            _firstRender = false;
        }
    }


    [JSInvokable]
    public async Task<string> SaveFreightQuotation(decimal distanceKm, decimal costPerKm, decimal baseCost, decimal insuranceCost, decimal totalCost, string truckType, string insuranceOption, string origin, string destination, string freightDate, decimal freightLatitude, decimal freightLongitude)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Primero se verifica si el usuario está autenticado
        if (!user.Identity.IsAuthenticated)
        {
            return "Por favor, inicie sesión para cotizar.";
        }

        int userId = int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier));

        var fq = new FreightQuotation
            {
                UserId = userId,
                QuotationNumber = "FQ-" + Guid.NewGuid().ToString().Substring(0, 8),
                Origin = origin,
                Destination = destination,
                FreightDate = DateTime.Parse(freightDate),
                TruckType = truckType,
                InsuranceOption = insuranceOption,
                DistanceKm = distanceKm,
                CostPerKm = costPerKm,
                BaseCost = baseCost,
                InsuranceCost = insuranceCost,
                TotalCost = totalCost,
                FreightLatitude = freightLatitude,
                FreightLongitude = freightLongitude,
                Status = 0 // 0 = Cotización
            };

        await FreightQuotationService.AddFreightQuotationAsync(fq);
        return "Cotización guardada correctamente";
    }
    [JSInvokable]
    public async Task<string> SaveFreightOrder(decimal distanceKm, decimal costPerKm, decimal baseCost, decimal insuranceCost, decimal totalCost, string truckType, string insuranceOption, string origin, string destination, string freightDate, decimal freightLatitude, decimal freightLongitude)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Se verifica la autenticación antes de parsear el user ID
        if (!user.Identity.IsAuthenticated)
        {
            return "Por favor, inicie sesión para ordenar el flete.";
        }

        int userId = int.Parse(user.FindFirstValue(ClaimTypes.NameIdentifier));

        var fq = new FreightQuotation
            {
                UserId = userId,
                QuotationNumber = "FQ-" + Guid.NewGuid().ToString().Substring(0, 8),
                Origin = origin,
                Destination = destination,
                FreightDate = DateTime.Parse(freightDate),
                TruckType = truckType,
                InsuranceOption = insuranceOption,
                DistanceKm = distanceKm,
                CostPerKm = costPerKm,
                BaseCost = baseCost,
                InsuranceCost = insuranceCost,
                TotalCost = totalCost,
                FreightLatitude = freightLatitude,
                FreightLongitude = freightLongitude,
                Status = 1 // 1 = Ordenada (Hacer Flete)
            };

        await FreightQuotationService.AddFreightQuotationAsync(fq);
        return "Flete ordenado exitosamente";
    }

    private string selectedTruckType { get; set; } = "pickup";
    private async Task SelectTruckType(string type)
    {
        selectedTruckType = type;
        await JS.InvokeVoidAsync("applyTruckSelectionEffect", type);
        await JS.InvokeVoidAsync("updateTruckCosts");

        _ = JS.InvokeVoidAsync("updateTruckCosts");
    }

    private async Task ActivateMapSelection() => await JS.InvokeVoidAsync("activateMapSelection");
    private async Task CalculateRoute()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // 1.  ¿Está autenticado?
        if (!authState.User.Identity.IsAuthenticated)
        {
            // 2.  Muestra un aviso en el navegador y sale
            await JS.InvokeVoidAsync("showAlert",
                "Por favor, inicie sesión o regístrese para poder calcular el flete.");
            return;
        }

        // 3.  Continúa con el cálculo normal
        await JS.InvokeVoidAsync("calculateRoute");
    }
    private async Task UpdateTruckCosts() => await JS.InvokeVoidAsync("updateTruckCosts");
    private async Task ClearData() => await JS.InvokeVoidAsync("clearData");
}

<style>

    /* Mejoras visuales para el contenedor de selección de camiones */
    .truck-selection {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
        margin-top: 10px;
        perspective: 1000px; /* Añade profundidad para efectos 3D */
    }

    /* Estilo base mejorado para las tarjetas de camiones */
    .truck-card {
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 18px 12px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        width: 130px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 3px 6px rgba(0,0,0,0.1);
        background-color: white;
        z-index: 1;
    }

        /* Efecto hover avanzado */
        .truck-card:hover {
            transform: translateY(-8px) scale(1.05);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
            border-color: #F5C144;
        }

        /* Efecto más destacado para la carta activa */
        .truck-card.active {
            background-color: #fffcf0;
            border-color: #F5C144;
            box-shadow: 0 8px 16px rgba(245, 193, 68, 0.4);
            transform: translateY(-5px);
        }

        /* Mejora visual para los iconos */
        .truck-card i {
            display: block;
            margin-bottom: 10px;
            font-size: 2.2rem;
            color: #555;
            transition: all 0.3s ease;
        }

        /* Cambia color del icono en hover */
        .truck-card:hover i {
            color: #F5C144;
            transform: scale(1.1);
        }

        /* Color del icono en la carta activa */
        .truck-card.active i {
            color: #F5C144;
        }

        /* Nombre del camión con estilo mejorado */
        .truck-card .truck-name {
            font-weight: 500;
            margin-top: 5px;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            color: #555;
        }

        .truck-card:hover .truck-name,
        .truck-card.active .truck-name {
            color: #333;
        }

        /* Efecto de destello al seleccionar */
        .truck-card::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(120deg, rgba(255,255,255,0) 30%, rgba(255,255,255,0.8), rgba(255,255,255,0) 70%);
            transform: translateX(-100%);
            transition: none;
            z-index: -1;
        }

        .truck-card.active::after {
            animation: shine 1.5s ease-out;
        }

    /* Animación de destello */
    @@keyframes shine {
        100% {
            transform: translateX(100%);
        }
    }

    /* Efecto pulsante sutil para la carta activa */
    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(245, 193, 68, 0.7);
        }

        70% {
            box-shadow: 0 0 0 10px rgba(245, 193, 68, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(245, 193, 68, 0);
        }
    }

    .truck-card.active {
        animation: pulse 2s infinite;
    }

    /* Mejoras para responsividad */
    @@media (max-width: 768px) {
        .truck-selection {
            gap: 10px;
        }

        .truck-card {
            width: calc(33.33% - 10px);
            padding: 12px 8px;
            min-width: 90px;
        }

            .truck-card i {
                font-size: 1.8rem;
                margin-bottom: 5px;
            }

            .truck-card .truck-name {
                font-size: 0.8rem;
            }
    }

    @@media (max-width: 480px) {
        .truck-selection {
            gap: 8px;
        }

        .truck-card {
            width: calc(50% - 8px);
            padding: 10px 5px;
        }
    }

    .btn-success {
        background-color: #F5C144;
        border-color: #F5C144;
    }

        .btn-success:hover {
            background-color: #A7A9AC;
            border-color: #A7A9AC;
        }

    .btn-secondary {
        background-color: #000000;
        border-color: #000000;
    }

        .btn-secondary:hover {
            background-color: #A7A9AC;
            border-color: #A7A9AC;
        }

    .card {
        border-radius: 0.5rem;
    }

    .header-card {
        background-color: #007bff;
        color: white;
        border-top-left-radius: 0.5rem;
        border-top-right-radius: 0.5rem;
    }

    .pac-container {
        border-radius: 8px !important;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1) !important;
        border: 1px solid #dee2e6 !important;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        font-size: 1rem;
        z-index: 1051;
    }

    .pac-item {
        padding: 10px 15px !important;
        cursor: pointer;
    }

        .pac-item:hover {
            background-color: #f8f9fa !important;
        }

    .pac-item-selected {
        background-color: #e9ecef !important;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
        border-radius: 5px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }

    @@media (max-width: 767px) {
        #map {
            height: 300px;
        }
    }
</style>