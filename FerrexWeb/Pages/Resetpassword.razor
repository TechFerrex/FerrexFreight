@page "/resetpassword"
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using FerrexWeb.Models
@using FerrexWeb.Services
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext

<div class="main">
    <h3>Restablecer contraseña</h3>

    @if (processing)
    {
        <p>Validando enlace…</p>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h3 style="color:red">¡Error!</h3>
                <p>@errorMessage</p>
                <div style="text-align:right">
                    <button class="user-button"
                          @onclick='() => NavigationManager.NavigateTo("/")'>
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    }
    else if (resetCompleted)
    {
        <div class="modal-overlay">
            <div class="modal-box">
                <h3>¡Éxito!</h3>
                <p>Tu contraseña ha sido actualizada. Ya puedes <a href="/login">iniciar sesión</a>.</p>
                <div style="text-align:right">
                    <button class="user-button" @onclick='() => NavigationManager.NavigateTo("/login")'>
                        Ir a Login
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="model" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText type="password"
                       class="user-input"
                       @bind-Value="model.NewPassword"
                       placeholder="Nueva contraseña" />
            <InputText type="password"
                       class="user-input"
                       @bind-Value="model.ConfirmPassword"
                       placeholder="Confirmar contraseña" />

            <button type="submit" class="user-button" disabled="@isSubmitting">
                @(isSubmitting ? "Guardando..." : "Cambiar contraseña")
            </button>
        </EditForm>
    }
</div>

@code {
    private bool    processing     = true;
    private bool    isSubmitting   = false;
    private bool    resetCompleted = false;
    private string  errorMessage;
    private ResetModel model       = new();

    // View-model con validaciones
    private class ResetModel
    {
        public string Token { get; set; }

        [Required(ErrorMessage = "La nueva contraseña es obligatoria.")]
        [MinLength(8, ErrorMessage = "Mínimo 8 caracteres.")]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Confirma tu contraseña.")]
        [Compare(nameof(NewPassword), ErrorMessage = "Las contraseñas no coinciden.")]
        [DataType(DataType.Password)]
        public string ConfirmPassword { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // 1) Leer token de la query
        var uri   = new Uri(NavigationManager.Uri);
        var qs    = QueryHelpers.ParseQuery(uri.Query);
        if (!qs.TryGetValue("token", out var t) || string.IsNullOrWhiteSpace(t))
        {
            errorMessage = "Token inválido.";
            processing   = false;
            return;
        }
        model.Token = t;

        // 2) Validar token en BD
        var pr = await DbContext.PasswordResets
                    .Include(x => x.User)
                    .FirstOrDefaultAsync(x => x.Token == model.Token);

        if (pr == null)
        {
            errorMessage = "Enlace no encontrado.";
            processing   = false;
            return;
        }

        if (pr.ExpiresAt < DateTime.UtcNow)
        {
            errorMessage = "El enlace ha expirado.";
            processing   = false;
            return;
        }

        // Todo OK: mostrar formulario
        processing = false;
    }

    private async Task HandleResetPassword()
    {
        if (isSubmitting) return;
        isSubmitting = true;

        // 1) Volver a cargar y validar
        var pr = await DbContext.PasswordResets
                    .Include(x => x.User)
                    .FirstOrDefaultAsync(x => x.Token == model.Token);

        if (pr == null || pr.ExpiresAt < DateTime.UtcNow)
        {
            errorMessage  = "El enlace ya no es válido.";
            isSubmitting  = false;
            return;
        }

        // 2) Actualizar contraseña
        pr.User.Password = BCrypt.Net.BCrypt.HashPassword(model.NewPassword);

        // 3) Eliminar petición de reseteo
        DbContext.PasswordResets.Remove(pr);

        await DbContext.SaveChangesAsync();

        // 4) Mostrar éxito
        resetCompleted = true;
        isSubmitting   = false;
    }
}
