@* @page "/productdetails/{productId:int}"
@using FerrexWeb.Models
@using FerrexWeb.Services
@inject ProductService ProductService
@inject ShoppingCartService CartService
@inject NotificationService NotificationService

@if (producto == null)
{
    <p>No se seleccionó ningún producto.</p>
}
else
{
    <div class="product-detail-container">
        <div class="product-image-container">
            <img class="product-image" src="@producto.ImageUrl" alt="@producto.DescProducto" />
        </div>
        <div class="product-details">
            <h4 class="product-title">@producto.DescProducto</h4>
            <p class="product-price">
                Precio: @producto.Precio.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("es-HN"))
            </p>

            @if (!IsAluzinc)
            {
                <!-- Dropdown para seleccionar Tipo -->
                @if (AvailableTypes.Any())
                {
                    <div class="selector">
                        <label for="typeSelect">Tipo:</label>
                        <!-- Se asigna el valor actual y se controla el evento onchange manualmente -->
                        <select id="typeSelect" value="@selectedType" onchange="@OnTypeChanged">
                            @foreach (var type in AvailableTypes)
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                    </div>
                }
                <!-- Dropdown para seleccionar Tamaño -->
                @if (AvailableSizes.Any())
                {
                    <div class="selector">
                        <label for="sizeSelect">Tamaño:</label>
                        <select id="sizeSelect" value="@selectedSize" onchange="@OnSizeChanged">
                            @foreach (var size in AvailableSizes)
                            {
                                <option value="@size">@size</option>
                            }
                        </select>
                    </div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }
            }
            else
            {
                @if (IsAluzinc)
                {
                    <hr />
                    <h5>Opciones de Lámina Aluzinc</h5>

                    <div class="selector">
                        <label for="variantColor">Color:</label>
                        <select id="variantColor" @bind="selectedColor">
                            <option value="">--Seleccione--</option>
                            @foreach (var v in aluzincVariants.Select(v => v.Color).Distinct())
                            {
                                <option value="@v">@v</option>
                            }
                        </select>
                    </div>

                    <div class="selector">
                        <label for="variantCalibre">Calibre:</label>
                        <select id="variantCalibre" @bind="selectedCalibre">
                            <option value="">--Seleccione--</option>
                            @foreach (var v in aluzincVariants.Select(v => v.Calibre).Distinct())
                            {
                                <option value="@v">@v</option>
                            }
                        </select>
                    </div>

                    <div class="selector">
                        <label for="variantMm">Milimetro:</label>
                        <select id="variantMm" @bind="selectedMilimetro">
                            <option value="">--Seleccione--</option>
                            @foreach (var v in aluzincVariants.Select(v => v.Milimetros).Distinct())
                            {
                                <option value="@v">@v</option>
                            }
                        </select>
                    </div>

                    <div class="selector">
                        <label for="variantCrestas">Perfil/Crestas:</label>
                        <select id="variantCrestas" @bind="selectedCrestas">
                            <option value="">--Seleccione--</option>
                            @foreach (var v in aluzincVariants.Select(v => v.PerfilCrestas).Distinct())
                            {
                                <option value="@v">@v</option>
                            }
                        </select>
                    </div>

                    <div class="selector">
                        <label for="largoInput">Largo (en pies):</label>
                        <input id="largoInput" type="number" step="0.01" @bind="selectedLargo" />
                    </div>
                }


            }

            <!-- Controles de cantidad -->
            <div class="product-quantity">
                <label for="cantidad">Cantidad (@producto.Unit):</label>
                <div class="quantity-control">
                    <button type="button" class="btn-quantity" @onclick="DecrementarCantidad">
                        <i class="fas fa-minus"></i>
                    </button>
                    <!-- Para el input de cantidad usamos onchange manualmente -->
                    <input type="number" id="cantidad" value="@cantidad" onchange="@( (ChangeEventArgs e) => cantidad = int.Parse(e.Value.ToString()) )" min="1" />
                    <button type="button" class="btn-quantity" @onclick="IncrementarCantidad">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </div>

            <!-- Botón Agregar al carrito -->
            <button class="btn btn-primary" @onclick="AgregarAlCarrito" disabled="@(!string.IsNullOrEmpty(errorMessage))">
                Agregar al carrito
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int productId { get; set; }

    private Products producto = null;
    private int cantidad = 1;
    private List<Products> productsWithSameType = new List<Products>();
    private List<string> AvailableTypes = new List<string>();
    private List<string> AvailableSizes = new List<string>();

    // Variables para almacenar la selección del usuario
    private string selectedType;
    private string selectedSize;
    private string errorMessage = "";

    // Variables para las opciones de Aluzinc
    private string selectedColor;
    private string selectedCalibre;
    private string selectedMilimetro;
    private decimal selectedLargo = 0;

    private List<AluzincVariant> aluzincVariants = new();
    private string selectedCrestas;



    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // Cargar el producto inicial según el productId
            producto = await ProductService.GetProductByIdAsync(productId);
            if (producto == null)
            {
                Console.WriteLine($"Producto con ID {productId} no encontrado.");
                return;
            }

            // Cargar todas las variantes (productos con el mismo NewProductoType)
            productsWithSameType = await ProductService.GetProductsByNewProductoTypeAsync(producto.NewProductoType)
                                  ?? new List<Products>();

            // Preparar las listas de tipos y tamaños disponibles
            AvailableTypes = productsWithSameType
                .Select(p => string.IsNullOrEmpty(p.Types) || p.Types == "N/A" ? "Sin tipo" : p.Types)
                .Distinct()
                .ToList();

            AvailableSizes = productsWithSameType
                .Where(p => !string.IsNullOrEmpty(p.Size) && p.Size != "N/A")
                .Select(p => p.Size)
                .Distinct()
                .ToList();

            // Inicializar la selección con los valores del producto actual
            selectedType = (!string.IsNullOrEmpty(producto.Types) && producto.Types != "N/A")
                           ? producto.Types
                           : "Sin tipo";

            selectedSize = (!string.IsNullOrEmpty(producto.Size) && producto.Size != "N/A")
                           ? producto.Size
                           : (AvailableSizes.Any() ? AvailableSizes.First() : null);

            if (IsAluzinc)
            {
                // Cargamos las variantes de la BD:

                aluzincVariants = await ProductService.GetAluzincVariantsByProductIdAsync(producto.Codigo);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el producto: {ex.Message}");
            producto = null;
        }
    }



    private AluzincVariant GetSelectedAluzincVariant()
    {
        if (!IsAluzinc || aluzincVariants == null) return null;

        return aluzincVariants.FirstOrDefault(v =>
            v.Color == selectedColor &&
            v.Calibre == selectedCalibre &&
            v.Milimetros == selectedMilimetro &&
            v.PerfilCrestas == selectedCrestas
        );
    }

    // Controlador para el cambio de Tipo
    private void OnTypeChanged(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString();
        ActualizarProductoVariant();
    }

    // Controlador para el cambio de Tamaño
    private void OnSizeChanged(ChangeEventArgs e)
    {
        selectedSize = e.Value?.ToString();
        ActualizarProductoVariant();
    }

    // Actualiza la variante del producto según la combinación seleccionada
    private void ActualizarProductoVariant()
    {
        errorMessage = "";
        if (productsWithSameType == null || !productsWithSameType.Any())
        {
            errorMessage = "No hay variantes disponibles para este producto.";
            return;
        }

        var consulta = productsWithSameType.AsQueryable();

        if (!string.IsNullOrEmpty(selectedType))
        {
            if (selectedType == "Sin tipo")
                consulta = consulta.Where(p => string.IsNullOrEmpty(p.Types) || p.Types == "N/A");
            else
                consulta = consulta.Where(p => p.Types == selectedType);
        }

        if (!string.IsNullOrEmpty(selectedSize))
            consulta = consulta.Where(p => p.Size == selectedSize);

        var variante = consulta.OrderBy(p => p.IdProducto).FirstOrDefault();
        if (variante != null)
        {
            producto = variante;
            productId = producto.IdProducto;
            producto.ImageUrl = ProductService.GetProductImageUrl(producto.ImageUrl);
        }
        else
        {
            errorMessage = "La combinación seleccionada de tipo y tamaño no está disponible.";
        }
        StateHasChanged();
    }
    private async Task AgregarAlCarrito()
    {
        if (producto == null) return;

        if (!IsAluzinc)
        {
            // Producto normal
            await CartService.AddToCartAsync(producto, cantidad);
        }
        else
        {
            // Aluzinc: pasa color, calibre, milímetro y largo
            await CartService.AddToCartAsync(
                product: producto,
                quantity: cantidad,
                aluzincLargo: selectedLargo,
                aluzincCalibre: selectedCalibre,
                aluzincMilimetro: selectedMilimetro,
                aluzincColor: selectedColor
            );
        }
    }

    private void IncrementarCantidad() => cantidad++;
    private void DecrementarCantidad() { if (cantidad > 1) cantidad--; }

    // Determina si el producto es de tipo Aluzinc
    private bool IsAluzinc => producto?.NewProductoType?.Contains("Aluzinc", StringComparison.OrdinalIgnoreCase) == true;
}



<style>
    .product-detail-container {
        display: flex;
        flex-wrap: wrap;
        max-width: 800px;
        margin: 40px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    .product-image-container {
        flex: 1 1 300px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .product-details {
        flex: 1 1 300px;
        margin-left: 20px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .product-image {
        max-width: 100%;
        height: auto;
        border-radius: 10px;
    }

    .product-title {
        font-size: 1.5em; /* Ajustado a unidades relativas */
        font-weight: bold;
        margin-bottom: 20px;
    }

    .product-price {
        font-size: 1.25em;
        color: #F5C144;
        margin-bottom: 10px;
    }

    .selector {
        margin-bottom: 15px;
    }

        .selector label {
            display: block;
            margin-bottom: 5px;
        }

        .selector select {
            width: 100%;
            padding: 8px;
            font-size: 1em;
        }

    .product-quantity {
        margin-bottom: 20px;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn-quantity {
        width: 2.5em;
        height: 2.5em;
        background-color: #b4b6b8;
        border: none;
        border-radius: 50%;
        color: #F5C144;
        font-size: 1.5em;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .btn-quantity:hover {
            background-color: #000000;
        }

        .btn-quantity i {
            color: #FFFFFF;
        }

    .quantity-control input[type="number"] {
        width: 3em;
        text-align: center;
        margin: 0 5px;
        -webkit-appearance: none;
        -moz-appearance: textfield;
        appearance: textfield;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 5px;
        font-size: 1em;
    }

        .quantity-control input[type="number"]::-webkit-inner-spin-button,
        .quantity-control input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

    .btn-primary {
        padding: 10px 20px;
        background-color: #F5C144;
        border: none;
        color: white;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.3s;
    }

        .btn-primary:hover {
            background-color: #000000;
        }

    .error-message {
        color: red;
        margin-top: 10px;
        font-weight: bold;
    }

    @@media (max-width: 768px) {
        .product-detail-container {
            flex-direction: column;
            align-items: center;
        }

        .product-image-container,
        .product-details {
            margin: 0;
        }

        .product-details {
            margin-top: 20px;
            text-align: center;
        }

        .quantity-control {
            justify-content: center;
        }

            .quantity-control input[type="number"] {
                width: 2.5em;
                margin: 0 5px;
            }

        .btn-quantity {
            width: 2em;
            height: 2em;
            font-size: 1.2em;
        }
    }

</style> *@