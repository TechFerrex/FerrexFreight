@using FerrexWeb.Services
@using FerrexWeb.Models
@inject SeekerService SeekerService
@inject NavigationManager NavigationManager

<div class="buscador-flotante">
    <div class="search-floating-bar">
        <input @bind="SearchTerm" @bind:event="oninput"
               placeholder="Buscar..."
               class="floating-search-input" />
        <button class="floating-search-button" @onclick="BuscarProductosClick">
            <i class="fas fa-search"></i>
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(SearchTerm) && productos?.Count > 0)
    {
        <ul class="search-floating-results">
            @foreach (var p in productos)
            {
                <li class="search-floating-item" @onclick="() => SeleccionarProducto(p)">
                    @p.DescProducto
                </li>
            }
        </ul>
    }
</div>

@code {
    private List<Products> productos = new();
    private string searchTerm = string.Empty;
    private CancellationTokenSource debounceCts = new();
    private const int debounceDelay = 300;

    public string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                DebounceSearch();
            }
        }
    }

    private void DebounceSearch()
    {
        debounceCts.Cancel();
        debounceCts.Dispose();
        debounceCts = new CancellationTokenSource();

        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(debounceDelay, debounceCts.Token);
                await InvokeAsync(BuscarProductosAsync);
            }
            catch (TaskCanceledException) { }
        });
    }

    private async Task BuscarProductosClick()
    {
        debounceCts.Cancel();
        debounceCts.Dispose();
        debounceCts = new CancellationTokenSource();
        await BuscarProductosAsync();
    }

    private async Task BuscarProductosAsync()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            productos.Clear();
        }
        else
        {
            productos = await SeekerService.GetProductosAsync(SearchTerm);
        }
        await InvokeAsync(StateHasChanged);
    }

    private void SeleccionarProducto(Products producto)
    {
        NavigationManager.NavigateTo($"/productdetails/{producto.IdProducto}");
        searchTerm = string.Empty;
        productos.Clear();
    }

    public void Dispose()
    {
        debounceCts.Cancel();
        debounceCts.Dispose();
    }
}




<style>
    * {
        box-sizing: border-box;
    }

    .buscador-flotante {
        position: relative;
        max-width: 400px;
        margin: 1rem auto;
    }

    .search-floating-bar {
        display: flex;
        align-items: center;
        background-color: #fff;
        border-radius: 40px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.15);
        overflow: hidden;
    }

    /* INPUT */
    .floating-search-input {
        flex: 1;
        border: none;
        outline: none;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        background-color: transparent;
    }

    /* BOTÓN */
    .floating-search-button {
        background-color: #F5C144; /* Amarillo */
        border: none;
        cursor: pointer;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        color: #fff; /* Texto/icono en blanco */
    }

        .floating-search-button i {
            color: #fff; /* Ícono en blanco */
        }

        .floating-search-button:hover {
            background-color: #A7A9AC;
        }

    /* LISTA DE RESULTADOS */
    .search-floating-results {
        position: absolute;
        top: 0; /* Parte superior del contenedor */
        left: 0;
        right: 0;
        margin: 0;
        list-style: none;
        background-color: #fff;
        border-radius: 40px; /* Mismo borde grande */
        box-shadow: 0 4px 10px rgba(0,0,0,0.15);
        z-index: 9999;
        /* Ajusta para “pegar” el dropdown justo debajo de la barra */
        margin-top: calc(3.2rem + 2px);
        /* Tamaño máximo y scroll interno */
        max-height: 300px;
        overflow-y: auto;
        /* Un poco de padding para que el scrollbar quede dentro */
        padding: 0.75rem 1rem 0.75rem 0.75rem;
        /* ↑ e.g. 1rem a la derecha, 0.75rem en otras direcciones */
    }

    .search-floating-item {
        padding: 0.5rem;
        cursor: pointer;
        font-size: 0.95rem;
        color: #000;
        border-radius: 10px;
    }

        .search-floating-item:hover {
            background-color: #F5C144;
            color: #fff;
        }

    .search-floating-results::-webkit-scrollbar {
        width: 8px; /* ancho del scroll */
    }

    .search-floating-results::-webkit-scrollbar-track {
        background: transparent; /* o un tono gris claro */
    }

    .search-floating-results::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 20px;
    }

        .search-floating-results::-webkit-scrollbar-thumb:hover {
            background-color: #aaa;
        }
</style>