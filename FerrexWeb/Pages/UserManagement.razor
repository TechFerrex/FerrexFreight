@page "/usersmanagement"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "SuperAdmin")]
@using FerrexWeb.Services
@inject ApplicationDbContext DbContext

<h3>Gestión de Usuarios</h3>

@if (users == null)
{
    <div class="loader">
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="square"></div>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Nombre</th>
                    <th>Email</th>
                    <th>Rol</th>
                    <th>Contraseña</th>
                    <th>Número Tel.</th>
                    <th>CreateTime</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        @if (editUser == user)
                        {
                            <td><InputText @bind-Value="userToEdit.Name" class="form-control" /></td>
                            <td><InputText @bind-Value="userToEdit.Email" class="form-control" /></td>
                            <td>@userToEdit.Role</td> <!-- No editable -->
                            <td><InputText @bind-Value="userToEdit.NewPassword" placeholder="Nueva contraseña" class="form-control" /></td>
                            <td><InputText @bind-Value="userToEdit.PhoneNumber" class="form-control" /></td>
                            <td>@userToEdit.CreateTime</td> <!-- No editable -->
                            <td>
                                <button class="btn btn-success btn-sm" @onclick="SaveUser">Guardar</button>
                                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancelar</button>
                            </td>
                        }
                        else
                        {
                            <td>@user.Name</td>
                            <td>@user.Email</td>
                            <td>@user.Role</td>
                            <td>********</td>
                            <td>@user.PhoneNumber</td>
                            <td>@user.CreateTime</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => EditUser(user)">Editar</button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    private List<User> users;
    private User editUser;
    private User userToEdit;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await DbContext.Users.ToListAsync();
    }

    private void EditUser(User user)
    {
        editUser = user;
        userToEdit = new User
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                Role = user.Role,
                CreateTime = user.CreateTime
            };
    }

    private async Task CancelEdit()
    {
        editUser = null;
        userToEdit = null;
        await LoadUsers(); // Recargamos los usuarios para descartar cambios
    }

    private async Task SaveUser()
    {
        var userInDb = await DbContext.Users.FindAsync(userToEdit.Id);
        if (userInDb != null)
        {
            userInDb.Name = userToEdit.Name;
            userInDb.Email = userToEdit.Email;
            userInDb.PhoneNumber = userToEdit.PhoneNumber;
            if (!string.IsNullOrWhiteSpace(userToEdit.NewPassword))
            {
                // Hash de la nueva contraseña usando BCrypt
                userInDb.Password = BCrypt.Net.BCrypt.HashPassword(userToEdit.NewPassword);
            }
            DbContext.Users.Update(userInDb);
            await DbContext.SaveChangesAsync();
            editUser = null;
            userToEdit = null;
            await LoadUsers();
        }
    }

}


<style>
    /* Estilos para el cargador */
    .loader {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 50px;
    }

    .circle {
        width: 20px;
        height: 20px;
        background-color: #000000;
        border-radius: 50%;
        animation: fade 1s infinite;
        margin: 0 5px;
    }

    .circle:nth-child(1) { animation-delay: 0.2s; }
    .circle:nth-child(2) { animation-delay: 0.4s; }
    .circle:nth-child(3) { animation-delay: 0.6s; }

    @@keyframes fade {
        0%, 20%, 100% { opacity: 0.2; }
        50% { opacity: 1; }
    }

    /* Estilos responsivos */
    @@media (max-width: 767.98px) {
        h3 {
            font-size: 1.5rem;
            text-align: center;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .table th, .table td {
            white-space: nowrap;
        }

        .btn {
            margin: 2px 0;
        }

        /* Ajustes para inputs en dispositivos móviles */
        .form-control {
            width: 100%;
            box-sizing: border-box;
        }
    }

    @@media (min-width: 768px) and (max-width: 991.98px) {
        /* Ajustes para tablets */
        h3 {
            font-size: 1.75rem;
            text-align: center;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .table th, .table td {
            white-space: nowrap;
        }

        .btn {
            margin: 2px 0;
        }
    }

    /* Estilos adicionales si es necesario */
</style>
