@page "/admin/freightquotations"
@using FerrexWeb.Models
@using FerrexWeb.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FreightQuotationService FreightQuotationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@attribute [Authorize(Roles = "SuperAdmin")]

<h3 class="text-center my-4">Administración de Cotizaciones de Fletes</h3>

@if (freightQuotations == null)
{
    <div class="text-center">
        <p>Cargando cotizaciones...</p>
    </div>
}
else if (!freightQuotations.Any())
{
    <p class="text-center">No hay cotizaciones disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Número de Cotización</th>
                    <th>Usuario (ID)</th>
                    <th>Origen</th>
                    <th>Destino</th>
                    <th>Fecha</th>
                    <th>Total</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var fq in freightQuotations)
                {
                    <tr>
                        <td>@fq.Id</td>
                        <td>@fq.QuotationNumber</td>
                        <td>@fq.UserId</td>
                        <td>@fq.Origin</td>
                        <td>@fq.Destination</td>
                        <td>@fq.FreightDate.ToString("dd/MM/yyyy")</td>
                        <td>@fq.TotalCost.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("es-HN"))</td>
                        <td>
                            <select class="form-select form-select-sm" @onchange="@(e => OnStatusChanged(fq, int.Parse(e.Value.ToString())))" value="@fq.Status">
                                <option value="0">Cotización</option>
                                <option value="1">Ordenada</option>
                                <option value="2">Expirada</option>
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-info btn-sm me-1" @onclick="() => ViewQuotation(fq)">
                                <i class="fas fa-eye"></i> Ver
                            </button>
                            <button class="btn btn-primary btn-sm" @onclick="() => UpdateStatusAsync(fq)">
                                <i class="fas fa-sync"></i> Actualizar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Modal reutilizado para visualizar la ruta -->
<div id="viewModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeViewModal()">&times;</span>
        <h4 class="modal-title text-center mb-3">Detalle de la Cotización</h4>
        <div class="mb-2">
            <strong>Origen:</strong> <span id="modalOrigin"></span>
        </div>
        <div class="mb-3">
            <strong>Destino:</strong> <span id="modalDestination"></span>
        </div>
        <div id="modalMapContainer" style="height: 400px; width: 100%; border: 1px solid #ddd; border-radius: 5px;"></div>
    </div>
</div>

<style>
    /* Estilos para el modal */
    .modal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 20px;
        border-radius: 8px;
        max-width: 600px;
        position: relative;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }

    .close {
        color: #aaa;
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover {
            color: #000;
        }
    /* Badges para el estado (si se usaran en otras partes) */
    .badge {
        padding: 0.5em 0.75em;
        border-radius: 0.5rem;
        font-size: 0.9em;
    }

    .bg-warning {
        background-color: #ffc107 !important;
        color: #212529;
    }

    .bg-primary {
        background-color: #007bff !important;
        color: #fff;
    }

    .bg-danger {
        background-color: #dc3545 !important;
        color: #fff;
    }

    .bg-secondary {
        background-color: #6c757d !important;
        color: #fff;
    }
</style>

@code {
    private List<FreightQuotation> freightQuotations;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated && user.IsInRole("SuperAdmin"))
        {
            freightQuotations = await FreightQuotationService.GetAllFreightQuotationsAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void OnStatusChanged(FreightQuotation fq, int newStatus)
    {
        fq.Status = newStatus;
    }

    private async Task UpdateStatusAsync(FreightQuotation fq)
    {
        await FreightQuotationService.UpdateStatusAsync(fq.Id, fq.Status);
        // Opcional: refrescar la lista o mostrar un mensaje de éxito
        freightQuotations = await FreightQuotationService.GetAllFreightQuotationsAsync();
    }

    private async Task ViewQuotation(FreightQuotation fq)
    {
        await JS.InvokeVoidAsync("showQuotationModal", fq.Origin, fq.Destination);
    }
}

<script>
    function showQuotationModal(origin, destination) {
        document.getElementById("modalOrigin").innerText = origin;
        document.getElementById("modalDestination").innerText = destination;
        // Inicializamos el mapa en el contenedor del modal
        var map = new google.maps.Map(document.getElementById("modalMapContainer"), {
            center: { lat: 14.0723, lng: -87.1921 },
            zoom: 7,
            mapTypeControl: false,
            streetViewControl: false,
            fullscreenControl: false
        });
        var directionsService = new google.maps.DirectionsService();
        var directionsRenderer = new google.maps.DirectionsRenderer({ suppressMarkers: false });
        directionsRenderer.setMap(map);
        directionsService.route({
            origin: origin,
            destination: destination,
            travelMode: google.maps.TravelMode.DRIVING
        }, function(response, status) {
            if (status === 'OK') {
                directionsRenderer.setDirections(response);
            } else {
                console.error("Error al obtener la ruta: " + status);
            }
        });
        // Abre el modal
        document.getElementById("viewModal").style.display = "block";
    }

    function closeViewModal() {
        document.getElementById("viewModal").style.display = "none";
    }
</script>
